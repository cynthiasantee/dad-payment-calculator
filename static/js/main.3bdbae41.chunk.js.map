{"version":3,"sources":["splitInQuotes.ts","transform.ts","redux/reducer/files.ts","FormOne.tsx","FormTwo.tsx","Submit.tsx","App.tsx","serviceWorker.ts","redux/rootReducer.ts","redux/store.ts","index.tsx"],"names":["splitCSVButIgnoreCommasInDoublequotes","str","elements","split","newElements","i","length","indexOf","indexOfRightQuotes","tmp","j","push","transform","doc","map","createSlice","name","initialState","fileOne","fileTwo","payPerDriver","unfoundLoads","reducers","addFileOne","state","action","payload","addFileTwo","calculate","hashFileA","slice","forEach","row","hashFileB","parseFloat","replace","Object","keys","load","pay","undefined","connect","files","dispatch","addFile","f","actions","props","type","id","onChange","file","document","querySelector","reader","FileReader","onload","event","target","result","readAsText","onClick","JSON","stringify","App","className","Boolean","window","location","hostname","match","combineReducers","reducer","store","configureStore","rootReducer","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3bdbae41.chunk.js","sourcesContent":["export function splitCSVButIgnoreCommasInDoublequotes(str: string) {  \n    //split the str first  \n    //then merge the elments between two double quotes  \n    var delimiter = ',';  \n    var quotes = '\"';  \n    var elements = str.split(delimiter);  \n    var newElements = [];  \n    for (var i = 0; i < elements.length; ++i) {  \n        if (elements[i].indexOf(quotes) >= 0) {//the left double quotes is found  \n            var indexOfRightQuotes = -1;  \n            var tmp = elements[i];  \n            //find the right double quotes  \n            for (var j = i + 1; j < elements.length; ++j) {  \n                if (elements[j].indexOf(quotes) >= 0) {  \n                    indexOfRightQuotes = j; \n                    break;\n                }  \n            }  \n            //found the right double quotes  \n            //merge all the elements between double quotes  \n            if (-1 != indexOfRightQuotes) {   \n                for (var j = i + 1; j <= indexOfRightQuotes; ++j) {  \n                    tmp = tmp + delimiter + elements[j];  \n                }  \n                newElements.push(tmp);  \n                i = indexOfRightQuotes;  \n            }  \n            else { //right double quotes is not found  \n                newElements.push(elements[i]);  \n            }  \n        }  \n        else {//no left double quotes is found  \n            newElements.push(elements[i]);  \n        }  \n    }  \n\n    return newElements;  \n}  ","import {splitCSVButIgnoreCommasInDoublequotes} from './splitInQuotes'\n\nexport const transform = (doc: string): string[][] => {\n    return doc.split(\"\\n\").map(splitCSVButIgnoreCommasInDoublequotes);\n}\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { transform } from '../../transform';\n\nexport interface DriverPay {\n    [key: string]: number\n}\n\nexport interface HashFileA {\n    [key: string]: string\n}\n\nexport interface HashFileB {\n    [key: string]: number\n}\n\nexport default createSlice({\n    name: 'files',\n    initialState: {\n        fileOne: [] as string[][],\n        fileTwo: [] as string[][],\n        payPerDriver: {} as DriverPay,\n        unfoundLoads: [] as string[]\n    },\n    reducers: {\n        addFileOne: (state, action: PayloadAction<string>) => {\n            return {\n                'fileOne': transform(action.payload),\n                'fileTwo' : state.fileTwo,\n                'payPerDriver': state.payPerDriver,\n                'unfoundLoads': state.unfoundLoads\n            }\n        },\n        addFileTwo: (state, action: PayloadAction<string>) => {\n            return {\n                'fileOne': state.fileOne,\n                'fileTwo' : transform(action.payload),\n                'payPerDriver': state.payPerDriver,\n                'unfoundLoads': state.unfoundLoads\n            }\n        },\n        calculate: (state) => {\n            const SKIP_FIRST = 1\n            const FIRST_LOAD_ID = 4\n            const DRIVER = 8\n            let hashFileA: HashFileA = {};\n            state.fileOne.slice(SKIP_FIRST).forEach((row) => {\n                hashFileA[row[FIRST_LOAD_ID]] = row[DRIVER]\n            })\n\n            const SECOND_LOAD_ID = 2\n            const PAY = 21\n            let hashFileB:HashFileB = {};\n            state.fileTwo.slice(SKIP_FIRST).forEach((row) => {\n                hashFileB[row[SECOND_LOAD_ID]] = parseFloat(row[PAY].replace(\"$\", \"\"))\n            })\n\n            Object.keys(hashFileB).forEach((load, i) => {\n                let name:string = hashFileA[load]\n                let pay: number = hashFileB[load]\n                if (name === undefined) {\n                    state.unfoundLoads.push(load)\n                } else if (!state.payPerDriver[name]) {\n                    state.payPerDriver[name] = 0\n                    state.payPerDriver[name] += pay\n                } else {\n                    state.payPerDriver[name] += pay\n                }\n            })\n\n            return state\n        }\n    }\n})","import React from 'react';\nimport { connect } from 'react-redux';\nimport { RootState } from './redux/store';\nimport files from './redux/reducer/files'\n\n\ninterface StateProps {\n    fileOne: string[][],\n}\n\ninterface DispatchProps {\n    addFile: (f: string) => void\n}\n\nconst FormOne = (props: StateProps & DispatchProps) => {\n    \n    \n    const onFileUpload = () => {\n        const fileSelector: any = document.querySelector('#myFile1')\n        const file = fileSelector.files[0]\n        const reader = new FileReader()\n        reader.onload = event => {\n            if (typeof event?.target?.result === 'string') {\n                {props.addFile(event?.target?.result)}\n            }\n        }\n        reader.readAsText(file)\n    }\n\n    return(\n        <div>\n            <form action=\"/action_page.php\">\n            <label>Upload trips</label>\n            <input type=\"file\" id=\"myFile1\" name=\"filename\" onChange={onFileUpload}/>\n            </form>\n        </div>\n    )\n}\n\nexport default connect<StateProps, DispatchProps, {}, RootState>(\n    (state) => ({\n        fileOne: state.files.fileOne\n    }),\n    (dispatch) => ({\n        addFile: (f: string) => dispatch(files.actions.addFileOne(f))\n    })\n)(FormOne);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { RootState } from './redux/store';\nimport files from './redux/reducer/files'\n\ninterface StateProps {\n    fileTwo: string[][]\n}\n\ninterface DispatchProps {\n    addFile: (f: string) => void\n}\n\nconst FormTwo = (props: StateProps & DispatchProps) => {\n    const onFileUpload = () => {\n        const fileSelector: any =document.querySelector('#myFile2')\n        const file = fileSelector.files[0]\n        const reader = new FileReader()\n        reader.onload = event => {\n            if (typeof event?.target?.result === 'string') {\n                {props.addFile(event?.target?.result)}\n            }\n        }\n        reader.readAsText(file)\n    }\n\n    return(\n        <div>\n            <form action=\"/action_page.php\">\n            <label>Upload invoice</label>\n            <input type=\"file\" id=\"myFile2\" name=\"filename\" onChange={onFileUpload}/>\n            </form>\n        </div>\n    )\n}\n\nexport default connect<StateProps, DispatchProps, {}, RootState>(\n    (state) => ({\n        fileTwo: state.files.fileTwo\n    }),\n    (dispatch) => ({\n        addFile: (f: string) => dispatch(files.actions.addFileTwo(f))\n    })\n)(FormTwo);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { RootState } from './redux/store';\nimport files, {DriverPay} from './redux/reducer/files'\n\ninterface StateProps {\n    payPerDriver: DriverPay,\n    unfoundLoads: string[]\n}\n\ninterface DispatchProps {\n    calculate: () => void;\n}\n\nconst Submit = (props: StateProps & DispatchProps) => {\n    \n    return(\n        <div>\n            <input onClick={props.calculate} type='submit'></input>\n            <p>Payment amount: {JSON.stringify(props.payPerDriver)}</p>\n            <p>Unfound loads: {JSON.stringify(props.unfoundLoads)}</p>\n        </div>\n    )\n}\n\nexport default connect<StateProps, DispatchProps, {}, RootState>(\n    (state) => ({\n        payPerDriver: state.files.payPerDriver,\n        unfoundLoads: state.files.unfoundLoads\n    }),\n    (dispatch) => ({\n        calculate: () => dispatch(files.actions.calculate())\n    })\n)(Submit);","import React from 'react';\nimport './App.css';\nimport FormOne from './FormOne'\nimport FormTwo from './FormTwo'\nimport Submit from './Submit'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FormOne></FormOne>\n      <FormTwo></FormTwo>\n      <Submit></Submit>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import files from './reducer/files';\nimport { combineReducers } from '@reduxjs/toolkit';\n\nexport default combineReducers({\n    files: files.reducer\n});","import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './rootReducer'; // Need to define reducers in another file\n\nconst store = configureStore({\n  reducer: rootReducer\n})\n\n// RootState is an interface representing type of entire store\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}